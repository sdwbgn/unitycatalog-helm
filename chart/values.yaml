storage:
  modelStorageRoot: ""

  credentials:
    # S3 credentials for accessing the storage
    s3: []
    # Credential secret must contain the following keys - accessKey, secretKey.
    # - bucketPath: s3://my-bucket-path
    #   region: us-east-1
    #   awsRoleArn: arn:aws:iam::123456789012:role/my-role
    #   credentialsSecretName: my-bucket-secret

    adls: []
    # Credential secret must contain the following keys - tenantId, clientId, clientSecret.
    # - storageAccountName: my-storage-account
    #   credentialsSecretName: my-storage-secret

    gcs: []
    # Credential secret must contain the following keys - jsonKey.
    # - bucketPath: gs://my-bucket-name
    #   credentialsSecretName: my-bucket-secret

auth:
  enabled: false

  # TODO: It is not possible to create proper admin account. This is a workaround.
  users: []
  # List of users to be created in the system. Each user must contain the following keys - name, email.
  # - name: admin
  #   email: test@example.com

  provider: google
  # Supported values: google, okta, keycloak, other
  # other: Use this option if you want to use a custom OAuth provider. UI does not have any built-in support for this option.

  authorizationUrl:
  tokenUrl:
  clientSecretName:
  # Client secret must contain the following keys - clientId, clientSecret.
  # authorizationUrl: https://accounts.google.com/o/oauth2/auth
  # tokenUrl: https://oauth2.googleapis.com/token
  # clientSecretName: my-client-secret

  redirectPort:
  cookieTimeout: P5D

  oktaDomain:

  keycloakRealmId:

db:
  type: file
  # Supported values: file
  # TODO: add support for postgres and mysql
  fileConfig:
    persistence:
      enabled: true
      accessModes: [ "ReadWriteOnce" ]
      size: 1Gi
      storageClassName: ""

server:
  config:
    persistence:
      enabled: true
      accessModes: [ "ReadWriteOnce" ]
      size: 100Mi
      storageClassName: ""

    # Extra config properties
    # Will be added to server.properties
    # extraProperties:
    #   my-config.property1: my-value1
    #   my-config.property2: my-value2
    extraProperties: {}

  service:
    type: ClusterIP
    port: 8080

  statefulset:
    port: 8080

    initContainer:
      image:
        repository: bhgedigital/envsubst
        pullPolicy: IfNotPresent
        tag: latest

    image:
      repository: ghcr.io/sdwbgn/unitycatalog-helm/docker/unitycatalog
      pullPolicy: IfNotPresent
      tag: ""

    imagePullSecrets: []

    podAnnotations: {}
    podLabels: {}

    podSecurityContext:
      fsGroup: 101 # This is default group for unitycatalog user, allows access to the mounted volumes

    securityContext: {}

    resources: {}

    livenessProbe:
      tcpSocket:
        port: api
    readinessProbe:
      tcpSocket:
        port: api

    volumes: []

    volumeMounts: []

    nodeSelector: {}

    tolerations: []

    affinity: {}

  createUsersJob:
    image:
      repository: badouralix/curl-jq
      pullPolicy: IfNotPresent
      tag: latest

    imagePullSecrets: []

ui:
  enabled: true

  service:
    type: ClusterIP
    port: 3000

  deployment:
    port: 3000

    replicaCount: 1

    initContainer:
      image:
        repository: busybox
        pullPolicy: IfNotPresent
        tag: latest

    image:
      repository: ghcr.io/sdwbgn/unitycatalog-helm/docker/unitycatalog-ui
      pullPolicy: IfNotPresent
      tag: ""

    imagePullSecrets: []

    podAnnotations: {}
    podLabels: {}

    podSecurityContext: {}

    securityContext: {}

    resources: {}

    livenessProbe:
      tcpSocket:
        port: ui
    readinessProbe:
      tcpSocket:
        port: ui

    volumes: []

    volumeMounts: []

    nodeSelector: {}

    tolerations: []

    affinity: {}

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""
